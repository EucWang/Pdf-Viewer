name: Notify on Released Label

on:
  issues:
    types: [labeled]

permissions:
  contents: read    # for getLatestRelease
  issues: write     # for listComments, createComment, updateComment

jobs:
  notify-released:
    if: ${{ github.event.label.name == 'Released' }}
    runs-on: ubuntu-latest

    steps:
      - name: Comment (or update) with latest release info
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const issue_number = context.payload.issue.number;

            // fetch the latest release
            const { data: latest } = await github.rest.repos.getLatestRelease({ owner, repo });
            const tag = latest.tag_name;
            const url = latest.html_url;

            // build our comment
            const header = `ðŸŽ‰ This issue has been **Resolved** in [**${tag}**](${url})!`;
            const prompt = `Please verify the fix in this release and let me know if the issue still persists!`;
            const body = [header, prompt].join("\n\n");

            // look for an existing bot comment on this issue
            const { data: comments } = await github.rest.issues.listComments({ owner, repo, issue_number });
            const existing = comments.find(c =>
              c.user.type === 'Bot' && c.body.includes(`**${tag}**`)
            );

            if (existing) {
              // update it
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existing.id,
                body
              });
            } else {
              // or create a new one
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body
              });
            }
